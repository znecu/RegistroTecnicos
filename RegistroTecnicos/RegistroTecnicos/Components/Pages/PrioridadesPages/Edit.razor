@page "/Prioridad/Edit/{PrioridadId:int}"
@inject PrioridadesServices prioridadesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer
<PageTitle>Editar</PageTitle>
<EditForm Model="Prioridad" OnValidSubmit="Editar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="shadow-lg">

            @*Header*@
            <div class="card-header text-center">
                <h3><strong>Editar prioridad</strong></h3>
            </div>

            @*Body*@
            <div class="card-body">

                @*PrioridadId*@
                <div class="col-1 mt-2">
                    <label class="form-label"><strong>PrioridadId</strong></label>
                    <div class="id-input">
                        <InputNumber class="form-control" readonly @bind-Value="Prioridad.PrioridadId"></InputNumber>
                    </div>
                </div>
                @*Descripcion*@
                <div class="col-2 mt-2">
                    <label class="form-label"><strong>Descripci&oacute;n</strong></label>
                    <InputText class="form-control" @bind-Value="Prioridad.Descripcion"></InputText>
                    <ValidationMessage For="(()=> Prioridad.Descripcion)" />
                </div>

                @*Tiempo*@
                <div class="col-2 mt-2">
                    <label class="form-label"><strong>Tiempo en minutos</strong></label>
                    <InputNumber class="form-control" @bind-Value="Prioridad.Tiempo"></InputNumber>
                    <ValidationMessage For="(()=> Prioridad.Tiempo)" />
                </div>
            </div>

            @*Footer*@
            <div class="card-footer text-end mt-3">
                <button type="button" class="btn btn-primary" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-warning">Editar</button>
                
            </div>
        </div>

    </div>
    @Mensaje

</EditForm>
@code {
    [Parameter]

    public int PrioridadId { get; set; }
    public Prioridades Prioridad { get; set; } = new Prioridades();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Prioridad = await prioridadesServices.Buscar(PrioridadId);
    }

    public async Task Editar()
    {
        if (await Validar())
        {
            Mensaje = "Ya existe esta prioridad. ";
            return;
        }

        var crear = await prioridadesServices.Guardar(Prioridad);

        if (crear)
        {
            Mensaje = "Se ha modificado correctamente. ";
            Volver();
        }

        else
        {
            Mensaje = "No se ha podido modificar. ";
        }
    }

    private async Task<bool> Validar()
    {
        var existe = await prioridadesServices.ExistePrioridad(Prioridad.PrioridadId, Prioridad.Descripcion);
        return existe;
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/Prioridad/Index");
    }

}
