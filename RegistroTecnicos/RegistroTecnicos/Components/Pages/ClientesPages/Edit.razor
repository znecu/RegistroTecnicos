@page "/Cliente/Edit/{ClienteId:int}"
@inject ClientesServices clientesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>
<EditForm Model="Cliente" OnValidSubmit="Editar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="shadow-lg">

            @*Header*@
            <div class="card-header text-center">
                <h3><strong>Editar cliente</strong></h3>
            </div>

            @*Body*@
            <div class="card-body">

                @*TiposTecnicosId*@
                <div class="col-1 mt-2">
                    <label class=" form-label"><strong>ClienteId</strong></label>
                    <div class="id-input">
                        <InputNumber class="form-control" readonly @bind-Value="Cliente.ClientesId"></InputNumber>
                    </div>
                </div>

                @*Nombre*@
                <div class="col-2 mt-2">
                    <label class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Cliente.Nombres"></InputText>
                    <ValidationMessage For="(()=> Cliente.Nombres)" />
                </div>

                @*Whatsapp*@
                <div class="col-2 mt-2">
                    <label class="form-label"><strong>Whatsapp</strong></label>
                    <InputText class="form-control" @bind-Value="Cliente.Whatsapp"></InputText>
                    <ValidationMessage For="(()=> Cliente.Whatsapp)" />
                </div>
            </div>
            @*Footer*@
            <div class="card-footer text-end mt-3">
                <button type="button" class="btn btn-primary" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-warning">Editar</button>
            </div>
        </div>
    </div>
    @Mensaje
</EditForm>
@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes Cliente { get; set; } = new Clientes();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Cliente = await clientesServices.Buscar(ClienteId);
    }

    public async Task Editar()
    {
        if (await Validar())
        {
            Mensaje = "Ya existe un tipo de cliente con esta descripción.";
            return;
        }

        var crear = await clientesServices.Guardar(Cliente);

        if (crear)
        {
            Mensaje = "Se ha modificado correctamente. ";
            Volver();
        }
        else
        {
            Mensaje = "No se ha podido modificar. ";
        }
    }

    private async Task<bool> Validar()
    {
        var existe = await clientesServices.ExisteCliente(Cliente.ClientesId, Cliente.Whatsapp, Cliente.Nombres);
        return existe;
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/Cliente/Index");
    }

}
